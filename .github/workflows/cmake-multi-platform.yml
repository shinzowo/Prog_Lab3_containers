name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions: write-all

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc]
        include:
          - os: windows-latest
            os_short: win64
            c_compiler: gcc
            cpp_compiler: g++
            generator: -G "MinGW Makefiles"
            cpack_type: zip
          - os: ubuntu-latest
            os_short: Linux
            c_compiler: gcc
            cpp_compiler: g++
            cpack_type: deb

    steps:
    - uses: actions/checkout@v4

    - name: Install minGW
      if: matrix.os == 'windows-latest'
      run: |
        choco install mingw
        echo "C:/mingw64/tools/bin" >> $env:GITHUB_PATH
        gcc --version
        g++ --version

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B .
        ${{ matrix.generator }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build . --config ${{ matrix.build_type }}
        cmake --build . --target package --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
      with:
        tag_name: ${{ github.run_number}}-${{ matrix.os_short}}
        release_name: Release ${{ github.run_number}}-${{matrix.os_short}}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./containers-0.1.0-${{ matrix.os_short }}.${{ matrix.cpack_type }}
        asset_name: containers-0.1.0-${{ matrix.os_short}}.${{ matrix.cpack_type }}
        asset_content_type: applications/${{ matrix.cpack_type}}

    

